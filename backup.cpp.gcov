        -:    0:Source:src/backup.cpp
        -:    0:Graph:src/backup.gcno
        -:    0:Data:src/backup.gcda
        -:    0:Runs:1
        -:    1:#include "backup.hpp"
        -:    2:#include <cassert>
        -:    3:#include <fstream>
        -:    4:#include <cstring>
        -:    5:#include <sys/stat.h>
        -:    6:#include <time.h>
        -:    7:
        -:    8:
        -:    9:/** 
        -:   10: * @brief  faz o backup de um arquivo listado em Backup.parm
        -:   11: * @author Bernardo Pimentel
        -:   12: * @param  caminho_backup_parm caminho do arquivo Backup.parm
        -:   13: * @param  caminho_destino caminho do destino onde o arquivo de interesse será copiado
        -:   14: * 
        -:   15: * Assertivas de entrada:
        -:   16: *      caminho_backup_parm != NULL
        -:   17: *      caminho_destino != NULL
        -:   18: *      assert(stat_destino.st_mtime > stat_pendrive.st_mtime)
        -:   19: * 
        -:   20: */ 
        -:   21:
        5:   22:int Salvar(const char *caminho_backup_parm, const char *caminho_destino) {
       5*:   23:    assert(caminho_backup_parm != nullptr);
       5*:   24:    assert(caminho_destino != nullptr);
        -:   25:
        5:   26:    FILE *backup_parm = fopen(caminho_backup_parm, "r");
        5:   27:    if (backup_parm == NULL) {
        1:   28:        return 1; // arquivo inexistente
        -:   29:    }
        -:   30:
        4:   31:    FILE * arquivo_destino = fopen(caminho_destino, "r");
        4:   32:    if (arquivo_destino == NULL) {
    #####:   33:        return 1; // arquivo inexistente
        -:   34:    }
        -:   35:
        -:   36:    // copia arquivo para o pendrive pt 1:
        4:   37:    const char *nome_arquivo = strrchr(caminho_destino, '/');
        4:   38:    if (nome_arquivo == NULL) {
    #####:   39:        nome_arquivo = caminho_destino;
        -:   40:    } else {
        4:   41:        nome_arquivo++; // pula a barra
        -:   42:    }
        -:   43:
        -:   44:    char caminho_no_pendrive[512];
        4:   45:    snprintf(caminho_no_pendrive, sizeof(caminho_no_pendrive), "tests/fixtures/pendrive_simulado/%s", nome_arquivo);
        -:   46:    // copiar arquivo para o pendrive pt 1
        -:   47:
        -:   48:    // Comparar idade do arquivo no pendrice com no HD:
        4:   49:    FILE* arquivo_no_pendrive = fopen(caminho_no_pendrive, "rb");
        4:   50:    if (!(arquivo_no_pendrive == NULL)) {
        -:   51:        struct stat stat_destino;
        -:   52:        struct stat stat_pendrive;
        -:   53:
        -:   54:        // stats do caminho destino
        3:   55:        if (stat(caminho_destino, &stat_destino) != 0) {
       2*:   56:            return 1;
        -:   57:        }
        -:   58:        // stats do caminho pendrive
        3:   59:        if (stat(caminho_no_pendrive, &stat_pendrive) != 0) {
    #####:   60:            return 1;
        -:   61:        }
        -:   62:
        -:   63:        // garantir q hd é mais velho
        3:   64:        if (stat_destino.st_mtime > stat_pendrive.st_mtime) {
        1:   65:            return 1; // erro 
        2:   66:        } else if (stat_destino.st_mtime == stat_pendrive.st_mtime) {
        1:   67:            return 0; // fazer nada
        -:   68:        }
        -:   69:    }
        -:   70:
        -:   71:
        -:   72:    // copiar arquivo para o pendrive pt 2
        2:   73:    FILE *arquivo_saida = fopen(caminho_no_pendrive, "wb");
        2:   74:    if (arquivo_saida == NULL) {
    #####:   75:        fclose(arquivo_destino);
    #####:   76:        fclose(backup_parm);
    #####:   77:        return 1; // erro ao criar arquivo de saída
        -:   78:    }
        -:   79:
        -:   80:    // Copia o conteúdo de arquivo_destino para arquivo_saida
        -:   81:    char buffer[4096];
        -:   82:    size_t bytes;
        3:   83:    while ((bytes = fread(buffer, 1, sizeof(buffer), arquivo_destino)) > 0) {
        1:   84:        fwrite(buffer, 1, bytes, arquivo_saida);
        -:   85:    }
        -:   86:    // copia arquivo para o pendrive pt 2.
        -:   87:    
        2:   88:    fclose(arquivo_saida);
        2:   89:    fclose(arquivo_destino);
        2:   90:    fclose(backup_parm);
        -:   91:
        -:   92:    // Aqui você pode fazer o que for necessário com o arquivo aberto.
        -:   93:    // Exemplo: copiar para outro local (caminho_destino), etc.
        2:   94:    return 0; // sucesso
        -:   95:}
        -:   96:
        -:   97:/** 
        -:   98: * @brief  restaura um arquivo listado em Backup.parm
        -:   99: * @author Bernardo Pimentel
        -:  100: * @param  caminho_backup_parm caminho do arquivo Backup.parm
        -:  101: * @param  caminho_fonte caminho do destino onde o arquivo de interesse será restaurado
        -:  102: * 
        -:  103: *  Assertivas de entrada:
        -:  104: *      caminho_backup_parm != NULL
        -:  105: *      caminho_fonte != NULL
        -:  106: */ 
        -:  107:
        4:  108:int Restaurar(const char *caminho_backup_parm, const char *caminho_fonte) {
       4*:  109:    assert(caminho_backup_parm != nullptr);
       4*:  110:    assert(caminho_fonte != nullptr);
        -:  111:
        4:  112:    FILE *backup_parm = fopen(caminho_backup_parm, "r");
        4:  113:    if (backup_parm == NULL) {
    #####:  114:        return 1; // erro: arquivo não existe
        -:  115:    }
        -:  116:
        4:  117:    FILE * arquivo_fonte = fopen(caminho_fonte, "r");
        4:  118:    if (arquivo_fonte == NULL) {
        2:  119:        return 1;
        -:  120:    }
        -:  121:
        -:  122:    // Aqui você pode fazer o que for necessário com o arquivo aberto.
        -:  123:    // Exemplo: copiar para outro local (caminho_destino), etc.
        -:  124:
        -:  125:    // copia arquivo para o HD pt 1:
        2:  126:    const char *nome_arquivo = strrchr(caminho_fonte, '/');
        2:  127:    if (nome_arquivo == NULL) {
    #####:  128:        nome_arquivo = caminho_fonte;
        -:  129:    } else {
        2:  130:        nome_arquivo++; // pula a barra
        -:  131:    }
        -:  132:
        -:  133:    char caminho_no_HD[512];
        2:  134:    snprintf(caminho_no_HD, sizeof(caminho_no_HD), "tests/fixtures/HD_simulado/%s", nome_arquivo);
        -:  135:    // copiar arquivo para o HD pt 1
        -:  136:
        -:  137:    // Comparar idade do arquivo no pendrice com no HD:
        2:  138:    FILE* arquivo_no_HD = fopen(caminho_no_HD, "rb");
        2:  139:    if (!(arquivo_no_HD == NULL)) {
        -:  140:        struct stat stat_fonte;
        -:  141:        struct stat stat_HD;
        -:  142:
        -:  143:        // stats do caminho destino
        2:  144:        if (stat(caminho_fonte, &stat_fonte) != 0) {
       2*:  145:            return 1;
        -:  146:        }
        -:  147:        // stats do caminho pendrive
        2:  148:        if (stat(caminho_no_HD, &stat_HD) != 0) {
    #####:  149:            return 1;
        -:  150:        }
        -:  151:
        -:  152:        // garantir q hd é mais velho
        2:  153:        if (stat_fonte.st_mtime < stat_HD.st_mtime) {
        1:  154:            return 1; // erro 
        1:  155:        } else if (stat_fonte.st_mtime == stat_HD.st_mtime) {
        1:  156:            return 0; // fazer nada
        -:  157:        }
        -:  158:    }
        -:  159:
        -:  160:    // copiar arquivo para o pendrive pt 2
    #####:  161:    FILE *arquivo_saida = fopen(caminho_no_HD, "wb");
    #####:  162:    if (arquivo_saida == NULL) {
    #####:  163:        fclose(arquivo_fonte);
    #####:  164:        fclose(backup_parm);
    #####:  165:        return 1; // erro ao criar arquivo de saida
        -:  166:    }
        -:  167:
        -:  168:    // Copia o conteúdo de arquivo_destino para arquivo_saida
        -:  169:    char buffer[4096];
        -:  170:    size_t bytes;
    #####:  171:    while ((bytes = fread(buffer, 1, sizeof(buffer), arquivo_fonte)) > 0) {
    #####:  172:        fwrite(buffer, 1, bytes, arquivo_saida);
        -:  173:    }
        -:  174:    // copia arquivo para o pendrive pt 2.
        -:  175:    
    #####:  176:    fclose(arquivo_saida);
    #####:  177:    fclose(arquivo_fonte);
    #####:  178:    fclose(backup_parm);
    #####:  179:    return 0; // sucesso
        -:  180:}
